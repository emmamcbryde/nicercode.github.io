* Configuring git to make life easier:

- R studio interace
- zsh and bash command line options
- colours
- git lol
- ssh keys

* General workflow

- git and large binary files
- separating source and generated files (+ using .gitignore)
- caching long running calculations
- never using numberic indices to refer to row names

* Version control
http://nakedstartup.com/2010/04/simple-daily-git-workflow

* Profiling code to see where bottlenecks are

* Simple R and C interfacing
- Convert the talk I gave before for a basic outline
- Rcpp interface
- Rcpp modules
- Use this to wrap something up --- Rcpp perhaps?  Or the ODE solver
  that I have already

* Plotting svg files as graph elements
- scatter plot of animals / plants perhaps

* Plotting bitmaps within figures
- tree with critters
- background to plot
- nice picture on side of plot
- aim at "talk" style figures

* Better graphing options

- impact of colour schemes
- moving things around
- placing labels
- multipanel figure
- figure generation workflow
- the importance of avoiding jpeg artefacts (& different figure types)
- Making colour palettes: http://tools.medialab.sciences-po.fr/iwanthue/

* Making things faster (Diego's code, for example)

* Matching things

Possibly also data de-duplication.

* Phylogenetics tricks

Radial trees, adding things to plots, trait plots, etc.

* Working with data

- Split apply combine strategy for R (http://www.jstatsoft.org/v40/i01). Plyr tutorial already developed by H Wickam http://plyr.had.co.nz/09-user/
- how to stack dataframes, loop is slow http://r.789695.n4.nabble.com/Fast-dependable-way-to-quot-stack-together-quot-data-frames-from-a-list-td2532293.html 

* Programming

- higher order functions

* Interfaces with databases

- Creating sqlite databases
- Reading from databases, and integrating them into a work flow.

* Mapping

- this is awesome, but hard to get started with.
- Have Kim do a guest post, perhaps?

* Style

- developing a consistent coding style
- braces and indenting
- variable naming
- size and scope of functions
- avoiding global variables
- hard coding paths, etc
- [Hadlye Wickams style guide](http://stat405.had.co.nz/r-style.html)
- [Googles R style guide](http://google-styleguide.googlecode.com/svn/trunk/google-r-style.html)


* Testing

* Resources
- Other things to read:
- tutorials for git
- 10 nice R packages: http://blog.yhathq.com/posts/10-R-packages-I-wish-I-knew-about-earlier.html


* Inspiration, 
why write nice code blog piece
why you should code, inspirational video http://www.code.org/, need some biological examples

