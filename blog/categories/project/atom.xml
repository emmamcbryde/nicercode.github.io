<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: project | Nice R Code]]></title>
  <link href="http://nicercode.github.io/blog/categories/project/atom.xml" rel="self"/>
  <link href="http://nicercode.github.io/"/>
  <updated>2016-09-16T12:20:04+10:00</updated>
  <id>http://nicercode.github.io/</id>
  <author>
    <name><![CDATA[Rich FitzJohn & Daniel Falster]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Modifying data with lookup tables]]></title>
    <link href="http://nicercode.github.io/blog/2013-07-09-modifying-data-with-lookup-tables/"/>
    <updated>2013-07-09T08:20:00+10:00</updated>
    <id>http://nicercode.github.io/blog/modifying-data-with-lookup-tables</id>
    <content type="html"><![CDATA[<!-- The problem:
- importing new data
- amount of code to be written (opportunities for mistake)
- separating data from scripts
- maintaining record of where data came from

Common approach
- long sequence of data modifying code

Solution
- use lookup table, find and replace
 -->

<p>In many analyses, data is read from a file, but must be modified before it can be used. For example you may want to add a new column of data, or do a “find” and “replace” on a site, treatment or species name. There are 3 ways one might add such information. The first involves editing the original data frame – although you should <em>never</em> do this, I suspect this method is quite common. A second – and widely used – approach for adding information is to modify the values using code in your script. The third – and nicest – way of adding information is to use a lookup table.</p>

<!-- more -->

<p>One of the most common things we see in the code of researchers working with data are long slabs of code modifying a data frame based on some logical tests.Such code might correct, for example, a species name:</p>

<p><code>r
raw$species[raw$id=="1"] &lt;- "Banksia oblongifolia"
raw$species[raw$id=="2"] &lt;- "Banksia ericifolia"
</code></p>

<p>or add some details to the data set, such as location, latitude, longitude and mean annual precipitation:</p>

<p><code>r
raw$location[raw$id=="1"] &lt;-"NSW"
raw$latitude[raw$id=="1"] &lt;- -37
raw$longitude[raw$id=="1"] &lt;- 40
raw$map[raw$id=="1"] &lt;- 1208
raw$map[raw$id=="1"] &lt;- 1226
</code></p>

<p>In large analyses, this type of code may go for hundreds of lines.</p>

<p><img src="../../images/2013-07-09-modifying-data-with-lookup-tables/messy_script.png"></p>

<p>Now before we go on, let me say that this approach to adding data is <em>much</em> better than editing your datafile directly, for the following two reasons:</p>

<ol>
  <li>It maintains the integrity of your raw data file</li>
  <li>You can see where the new value came from (it was added in a script), and modify it later if needed.</li>
</ol>

<p>There is also nothing <em>wrong</em> with adding data this way. However, it is what we would consider <em>messy</em> code, for these reasons:</p>

<ul>
  <li>Long chunks of code modifying data is inherently difficult to read.</li>
  <li>There’s a lot of typing involved, so lot’s of work, and thus opportunities for error.</li>
  <li>It’s harder to change variable names when they are embedded in code all over the place.</li>
</ul>

<p>A far <em>nicer</em> way to add data to an existing data frame is to use a lookup table. Here is an example of such a table, achieving similar (but not identical) modifications to the code above:</p>

<p><code>r
read.csv("dataNew.csv")
</code></p>

<p><div>
  <pre><code class='text'>##   lookupVariable lookupValue newVariable              newValue
## 1             id           1     species  Banksia oblongifolia
## 2             id           2     species    Banksia ericifolia
## 3             id           3     species       Banksia serrata
## 4             id           4     species       Banksia grandis
## 5                         NA      family            Proteaceae
## 6                         NA    location                   NSW
## 7             id           4    location                    WA
##            source
## 1  Daniel Falster
## 2  Daniel Falster
## 3  Daniel Falster
## 4  Daniel Falster
## 5  Daniel Falster
## 6  Daniel Falster
## 7  Daniel Falster</code></pre>
</div>
</p>

<p>The columns of this table are</p>

<ul>
  <li><strong>lookupVariable</strong> is the name of the variable in the parent data we want to match against. If left  blank, change all rows.</li>
  <li><strong>lookupValue</strong> is the value of lookupVariable to match against</li>
  <li><strong>newVariable</strong> is the variable to be changed</li>
  <li><strong>newValue</strong> is the value of <code>newVariable</code> for matched rows</li>
  <li><strong>source</strong> includes any notes about where the data came from (e.g., who made the change)</li>
</ul>

<p>So the table documents the changes we want to make to our dataframe. The function <a href="https://gist.github.com/dfalster/5589956">addNewData.R</a> takes the file name for this table as an argument and applies it to the data frame. For example let’s assume we have a data frame called <code>data</code></p>

<p><div>
  <pre><code class='r'>myData</code></pre>
</div>
</p>

<p><div>
  <pre><code class='text'>##          x     y id
## 1  0.93160 5.433  1
## 2  0.24875 3.868  2
## 3  0.92273 5.944  2
## 4  0.85384 5.541  2
## 5  0.30378 3.985  2
## 6  0.41205 4.415  2
## 7  0.35158 4.440  2
## 8  0.13920 3.007  2
## 9  0.16579 2.976  2
## 10 0.66290 5.315  3
## 11 0.25720 3.755  3
## 12 0.88086 5.345  3
## 13 0.11784 3.183  3
## 14 0.01423 3.749  4
## 15 0.23359 4.264  4
## 16 0.33614 4.433  4
## 17 0.52122 4.393  4
## 18 0.11616 3.603  4
## 19 0.90871 6.379  4
## 20 0.75664 5.838  4</code></pre>
</div>
</p>

<p>and want to apply the table given above, we simply write</p>

<p><code>r
source("addNewData.r")
allowedVars &lt;- c("species", "family", "location")
addNewData("dataNew.csv", myData, allowedVars)
</code></p>

<p><div>
  <pre><code class='text'>##          x     y id              species     family location
## 1  0.93160 5.433  1 Banksia oblongifolia Proteaceae      NSW
## 2  0.24875 3.868  2   Banksia ericifolia Proteaceae      NSW
## 3  0.92273 5.944  2   Banksia ericifolia Proteaceae      NSW
## 4  0.85384 5.541  2   Banksia ericifolia Proteaceae      NSW
## 5  0.30378 3.985  2   Banksia ericifolia Proteaceae      NSW
## 6  0.41205 4.415  2   Banksia ericifolia Proteaceae      NSW
## 7  0.35158 4.440  2   Banksia ericifolia Proteaceae      NSW
## 8  0.13920 3.007  2   Banksia ericifolia Proteaceae      NSW
## 9  0.16579 2.976  2   Banksia ericifolia Proteaceae      NSW
## 10 0.66290 5.315  3      Banksia serrata Proteaceae      NSW
## 11 0.25720 3.755  3      Banksia serrata Proteaceae      NSW
## 12 0.88086 5.345  3      Banksia serrata Proteaceae      NSW
## 13 0.11784 3.183  3      Banksia serrata Proteaceae      NSW
## 14 0.01423 3.749  4      Banksia grandis Proteaceae       WA
## 15 0.23359 4.264  4      Banksia grandis Proteaceae       WA
## 16 0.33614 4.433  4      Banksia grandis Proteaceae       WA
## 17 0.52122 4.393  4      Banksia grandis Proteaceae       WA
## 18 0.11616 3.603  4      Banksia grandis Proteaceae       WA
## 19 0.90871 6.379  4      Banksia grandis Proteaceae       WA
## 20 0.75664 5.838  4      Banksia grandis Proteaceae       WA</code></pre>
</div>
</p>

<p>The large block of code is now reduced to a single line that clearly expresses what we want to achieve. Moreover, the new values (data) are stored as a table of <em>data</em> in a file, which is preferable to having data mixed in with our code.</p>

<p>You can use this approach
You can find the example files used here, as a <a href="https://gist.github.com/dfalster/5589956">github gist</a>.</p>

<p><strong>Acknowledgements:</strong> Many thanks to Rich FitzJohn and Diego Barneche for valuable discussions.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organizing the project directory]]></title>
    <link href="http://nicercode.github.io/blog/2013-05-17-organising-my-project/"/>
    <updated>2013-05-17T08:20:00+10:00</updated>
    <id>http://nicercode.github.io/blog/organising-my-project</id>
    <content type="html"><![CDATA[<p>This is a guest post by Marcela Diaz, a PhD student at Macquarie University. </p>

<p>Until recently, I hadn’t given much attention to organising files in my project. All the documents and files from my current project were spread out in two different folders, with very little sub folder division. All the files where together in the same place and I had multiple versions of the same file, with different dates. As you can see, things were getting a bit out of control.</p>

<!--more -->
<p><img src="../../images/2013-05-17-organising-my-project/directory1_before.png"></p>

<p><img src="../../images/2013-05-17-organising-my-project/directory2_before.png"></p>

<p>Following <a href="../2013-04-05-projects/">advice from by Rich and Daniel</a>, I decided to spend a little time getting organised, adopting a directory layout with the following folders:</p>

<ul>
  <li>Data: which contains both my base (raw) data and the processed data </li>
  <li>Output: data and figures generated in R</li>
  <li>R: R scripts with all new functions I created as part of the cleaning directory process and in an attempt to write nicer code. </li>
  <li>Analysis (R file): R script sourcing all the functions necessary for the analysis </li>
</ul>

<p><img src="../../images/2013-05-17-organising-my-project/directory_after.png"></p>

<p>At the same time I <a href="../../git">started using version control with git</a>. As a result, I no longer need to create a new file every time I make a change, and each of the files in the analysis directory is unique.</p>

<p>Setting up the new directory and sorting the existing files in the new folders didn’t take long and was relatively easy. Now it is really simple to find files and keep track of current and old figures. I no longer need to use spotlight to find the latest version of each script. From my experience this improved the organization and efficiency of my project; I  highly recommend keeping a good project layout. </p>
]]></content>
  </entry>
  
</feed>
